"use strict";(self.webpackChunkgocondor_site=self.webpackChunkgocondor_site||[]).push([[1501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||a;return n?r.createElement(m,c(c({ref:t},u),{},{components:n})):r.createElement(m,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={title:"Cache"},c=void 0,i={unversionedId:"cache",id:"cache",title:"Cache",description:"GoCondor uses Redis for cache and its disabled by default, you can enable it in the file config/cache.go by setting the attribute EnableCache to true, then add Redis connection information to the .env if you are using it. otherwise, you can use an external tool to inject these variables into the environment",source:"@site/docs/cache.md",sourceDirName:".",slug:"/cache",permalink:"/docs/cache",draft:!1,editUrl:"https://github.com/gocondor/gocondor.github.io/edit/source/docs/cache.md",tags:[],version:"current",frontMatter:{title:"Cache"},sidebar:"docsSidebar",previous:{title:"Authentication",permalink:"/docs/authentication"},next:{title:"TLS",permalink:"/docs/tls"}},l={},s=[{value:"Set values in the cache",id:"set-values-in-the-cache",level:4},{value:"Set values in the cache with an expiration date",id:"set-values-in-the-cache-with-an-expiration-date",level:4},{value:"Get values from cache",id:"get-values-from-cache",level:4},{value:"Cache Delete",id:"cache-delete",level:4}],u={toc:s},p="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GoCondor uses ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis")," for cache and its disabled by default, you can enable it in the file ",(0,o.kt)("inlineCode",{parentName:"p"},"config/cache.go")," by setting the attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"EnableCache")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", then add ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis connection information")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," if you are using it. otherwise, you can use an external tool to inject these variables into the environment"),(0,o.kt)("p",null," Here is a sample of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Redis connection information in the "),".env` file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#######################################\n######            CACHE          ######\n#######################################\nCACHE_DRIVER=redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=\nREDIS_DB=0\n")),(0,o.kt)("h4",{id:"set-values-in-the-cache"},"Set values in the cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "github.com/gocondor/core"\n)\n\nfunc Login(c *core.Context) *core.Response {\n    err := c.GetCache().Set("userID", 12345)\n}\n')),(0,o.kt)("h4",{id:"set-values-in-the-cache-with-an-expiration-date"},"Set values in the cache with an expiration date"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "github.com/gocondor/core"\n)\n\nfunc Login(c *core.Context) *core.Response {\n    hours24 := time.Duration(time.Hour * 24) // 24 hours duration\n    afterHours24: time.Now().Add(hours24) // the date after 24 hours from now\n    err := c.GetCache().SetWithExpiration("userID", 12345, afterHours24) // expires after 24 hours\n}\n')),(0,o.kt)("h4",{id:"get-values-from-cache"},"Get values from cache"),(0,o.kt)("p",null,"Here is how you can get values from cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "github.com/gocondor/core"\n)\n\nfunc Login(c *core.Context) *core.Response {\n    userID, err := c.GetCache().Get("userID")\n}\n')),(0,o.kt)("h4",{id:"cache-delete"},"Cache Delete"),(0,o.kt)("p",null,"Here is how you can delete something from the cache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "github.com/gocondor/core"\n)\n\nfunc Login(c *core.Context) *core.Response {\n    err := c.GetCache().Delete("userID")\n}\n')))}h.isMDXComponent=!0}}]);