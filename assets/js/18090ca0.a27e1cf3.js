"use strict";(self.webpackChunkgocondor_site=self.webpackChunkgocondor_site||[]).push([[825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"Context"},i=void 0,l={unversionedId:"context",id:"context",title:"Context",description:"The context is an object that provides you with all the functionalities and information you need to handle a request, it contains things like request headers, form post data, uploaded files, database orm, sending emails, ...etc.",source:"@site/docs/context.md",sourceDirName:".",slug:"/context",permalink:"/docs/context",draft:!1,editUrl:"https://github.com/gocondor/gocondor.github.io/edit/source/docs/context.md",tags:[],version:"current",frontMatter:{title:"Context"},sidebar:"docsSidebar",previous:{title:"Handlers",permalink:"/docs/handlers"},next:{title:"Request",permalink:"/docs/request"}},s={},c=[{value:"GetPathParam(key string)",id:"getpathparamkey-string",level:3},{value:"GetRequestParam(key string)",id:"getrequestparamkey-string",level:3},{value:"RequestParamExists(key string)",id:"requestparamexistskey-string",level:3},{value:"GetHeader(key string)",id:"getheaderkey-string",level:3},{value:"GetUploadedFile(key string)",id:"getuploadedfilekey-string",level:3},{value:"MoveFile(srcPath, destLocation, newFileName)",id:"movefilesrcpath-destlocation-newfilename",level:3},{value:"MapToJson(myMap mapstringinterface{})",id:"maptojsonmymap-mapstringinterface",level:3},{value:"GetBaseDirPath()",id:"getbasedirpath",level:3},{value:"func CastToString(value interface{}) string",id:"func-casttostringvalue-interface-string",level:3},{value:"func CastToInt(value interface{}) int",id:"func-casttointvalue-interface-int",level:3},{value:"CastToFloat(value interface{}) float64",id:"casttofloatvalue-interface-float64",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The context is an ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," that provides you with all the functionalities and information you need to handle a request, it contains things like ",(0,r.kt)("inlineCode",{parentName:"p"},"request headers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"form post data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"uploaded files"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"database orm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sending emails"),", ...etc.\nIn addition to that it contains various functions to return different types of responses like ",(0,r.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"html"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"text")," ...etc.\nBelow are more details about the functionalities that the context provides you with:"),(0,r.kt)("h3",{id:"getpathparamkey-string"},"GetPathParam(key string)"),(0,r.kt)("p",null,"Get the URL path params"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    // route: example.com/users/:name\n    name := c.GetPathParam("name")\n}\n')),(0,r.kt)("h3",{id:"getrequestparamkey-string"},"GetRequestParam(key string)"),(0,r.kt)("p",null,"Get the form ",(0,r.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"put"),",...etc data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    // URL: example.com/users?name=jhon\n    name := c.GetRequestParam("name")\n    \n    fmt.Println(name) // outputs john\n}\n')),(0,r.kt)("h3",{id:"requestparamexistskey-string"},"RequestParamExists(key string)"),(0,r.kt)("p",null,"It check's if a request parameter exists, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if it exists and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if it doesn't"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    // URL: example.com/users?name=jhon\n    exists := c.RequestParamExists("name")\n    \n    fmt.Println(name) // outputs true\n}\n')),(0,r.kt)("h3",{id:"getheaderkey-string"},"GetHeader(key string)"),(0,r.kt)("p",null,"Gets the value of a request header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    token := c.GetHeader("authorization")\n}\n')),(0,r.kt)("h3",{id:"getuploadedfilekey-string"},"GetUploadedFile(key string)"),(0,r.kt)("p",null,"Returns information about the uploaded file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    fileInfo, err := c.GetUploadedFile("uploaded-file-key")\n    fileInfo.FullPath // full path to the temp location of the uploaded file\n    fileInfo.Name // the name of the file\n}\n')),(0,r.kt)("p",null,"Where:\n",(0,r.kt)("inlineCode",{parentName:"p"},"fileinfo")," is an object that has general information about the uploaded file, here is all the file information that it provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fileInfo.FullPath"),": full path to the temp location of the uploaded file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fileInfo.Name"),": the file name without the path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fileInfo.NameWithoutExtension"),": the file name without extension"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fileInfo.Extension"),": the extension of the file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fileInfo.Size"),": the file size in bytes\nto save the uploaded file to a specific location, check ",(0,r.kt)("a",{parentName:"li",href:"/docs/request#save-uploaded-file"},"this docs section"))),(0,r.kt)("h3",{id:"movefilesrcpath-destlocation-newfilename"},"MoveFile(srcPath, destLocation, newFileName)"),(0,r.kt)("p",null,"Move file from one location to another, it returns an error in case of any"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    err := c.MoveFile("./storage/myfile.paf", "./storage/pdfs/", "new-filename.pdf") \n}\n')),(0,r.kt)("h3",{id:"maptojsonmymap-mapstringinterface"},"MapToJson(myMap map","[string]","interface{})"),(0,r.kt)("p",null,"Convert map to json"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    jsonString := c.MapToJson(myMap)\n}\n")),(0,r.kt)("h3",{id:"getbasedirpath"},"GetBaseDirPath()"),(0,r.kt)("p",null,"Get the base project directory path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    path := c.GetBaseDirPath()\n}\n")),(0,r.kt)("h3",{id:"func-casttostringvalue-interface-string"},"func CastToString(value interface{}) string"),(0,r.kt)("p",null,"Convert any variable to string, it panics if it's not convertible to string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    string := c.CastToString(value)\n}\n")),(0,r.kt)("h3",{id:"func-casttointvalue-interface-int"},"func CastToInt(value interface{}) int"),(0,r.kt)("p",null,"Convert any variable to ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," including ",(0,r.kt)("inlineCode",{parentName:"p"},"(int32, int64, ...etc)"),", it panics if it's not convertible to ",(0,r.kt)("inlineCode",{parentName:"p"},"int")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    valueInt := c.CastToInt(value)\n}\n")),(0,r.kt)("h3",{id:"casttofloatvalue-interface-float64"},"CastToFloat(value interface{}) float64"),(0,r.kt)("p",null,"Convert any variable to ",(0,r.kt)("inlineCode",{parentName:"p"},"float64"),", it panics if it's not convertible to ",(0,r.kt)("inlineCode",{parentName:"p"},"float64")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    valueFloat64 := c.CastToFloat(value)\n}\n")))}m.isMDXComponent=!0}}]);