"use strict";(self.webpackChunkgocondor_site=self.webpackChunkgocondor_site||[]).push([[3853],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return t?n.createElement(f,s(s({ref:r},d),{},{components:t})):n.createElement(f,s({ref:r},d))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4880:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const o={title:"CRUD Operations"},s=void 0,i={unversionedId:"database-crud",id:"database-crud",title:"CRUD Operations",description:"To perform operations on your database first make sure database is enabled in the config/gorm.go",source:"@site/docs/database-crud.md",sourceDirName:".",slug:"/database-crud",permalink:"/docs/database-crud",draft:!1,editUrl:"https://github.com/gocondor/gocondor.github.io/edit/source/docs/database-crud.md",tags:[],version:"current",frontMatter:{title:"CRUD Operations"},sidebar:"docsSidebar",previous:{title:"Models",permalink:"/docs/database-models"},next:{title:"Relationships (Associations)",permalink:"/docs/database-relationships"}},l={},c=[{value:"Create",id:"create",level:2},{value:"Read",id:"read",level:2},{value:"Update",id:"update",level:2},{value:"Deleting",id:"deleting",level:2},{value:"Raw SQL",id:"raw-sql",level:2},{value:"Transactions",id:"transactions",level:2}],d={toc:c},u="wrapper";function p(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To perform operations on your database first make sure ",(0,a.kt)("inlineCode",{parentName:"p"},"database")," is enabled in the ",(0,a.kt)("inlineCode",{parentName:"p"},"config/gorm.go")),(0,a.kt)("h2",{id:"create"},"Create"),(0,a.kt)("p",null,"Here is an example of how you can create a database record "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "fmt"\n\n    "github.com/gocondor/core"\n    "github.com/gocondor/[my-project]/models"\n)\n\nfunc Signup(c *core.Context) *core.Response {\n    db := c.GetGorm()\n    hashedPassword, _ := c.GetHashing().HashPassword("my-password")\n    user := models.User{\n        Name:     "Jack", \n        Email:    "mail@example.com", \n        Password: hashedPassword,\n    }\n    result := db.Create(&user) // pass pointer\n    // user.ID: the inserted record primary key\n    // result.Error: returned error if any\n}\n')),(0,a.kt)("p",null,"More information is available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/create.html"},"gorm record creating docs")),(0,a.kt)("h2",{id:"read"},"Read"),(0,a.kt)("p",null,"Here is how you can read records from the database"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    var user User\n    result := DB.First(&user, 1) // find user id 1\n    // result.RowsAffected: found records count\n    // result.Error: if there is any error\n    errors.Is(result.Error, gorm.ErrRecordNotFound) // if record not found, the error ErrRecordNotFound is returned\n\n    DB.Where("email = ?", "mail@mail.com").First(&user),  // find the first user with email mail@mail.com\n\n    // Get the first record you find (ordered by primary key)\n    DB.First(&user) // SELECT * FROM users ORDER BY id LIMIT 1;\n\n    // Get one record, no specified order\n    DB.Take(&user) // SELECT * FROM users LIMIT 1;\n\n    // Get the last record ordered by primary key desc\n    DB.Last(&user) // SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\n    // Get all records\n    var users []User\n    result := DB.Find(&users) // SELECT * FROM users;\n}\n')),(0,a.kt)("p",null,"More information is available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/query.html"},"gorm records creating docs")),(0,a.kt)("p",null,"For more advanced queries check ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/advanced_query.html"},"GORM advanced queries docs")),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("p",null,"Here is how you can update a record "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func SomeHandler(c *core.Context) {\n    var user User\n    DB.First(&user)\n\n    user.Name = "Joe"\n    user.Age = 40\n    DB.Save(&user) // Note: save creates the record if missing\n}\n')),(0,a.kt)("p",null,"More information is available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/update.html"},"gorm records updating docs")),(0,a.kt)("h2",{id:"deleting"},"Deleting"),(0,a.kt)("p",null,"Here is how you can delete records:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func SomeHandler(c *core.Context) {\n    DB.Delete(&models.User{}, 10) // DELETE FROM users WHERE id = 10;\n    \n    DB.Delete(&models.users{}, []int{1,2,3}) // DELETE FROM users WHERE id IN (1,2,3)\n}\n")),(0,a.kt)("p",null,"More information is available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/delete.html"},"gorm records deleting docs")),(0,a.kt)("h2",{id:"raw-sql"},"Raw SQL"),(0,a.kt)("p",null,"The docs are available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/sql_builder.html"},"gorm  raw sql docs")),(0,a.kt)("h2",{id:"transactions"},"Transactions"),(0,a.kt)("p",null,"The docs are available at ",(0,a.kt)("a",{parentName:"p",href:"https://gorm.io/docs/transactions.html"},"gorm  transactions docs")))}p.isMDXComponent=!0}}]);