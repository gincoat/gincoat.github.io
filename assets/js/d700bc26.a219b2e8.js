"use strict";(self.webpackChunkgocondor_site=self.webpackChunkgocondor_site||[]).push([[1141],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>v});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=o,v=d["".concat(c,".").concat(u)]||d[u]||p[u]||a;return t?r.createElement(v,i(i({ref:n},g),{},{components:t})):r.createElement(v,i({ref:n},g))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={title:"Events"},i=void 0,s={unversionedId:"events",id:"events",title:"Events",description:"In GoCondor defining events is straightforward, first you need to add the event name as a constant to the file events\\event-names.go",source:"@site/docs/events.md",sourceDirName:".",slug:"/events",permalink:"/docs/events",draft:!1,editUrl:"https://github.com/gocondor/gocondor.github.io/edit/source/docs/events.md",tags:[],version:"current",frontMatter:{title:"Events"},sidebar:"docsSidebar",previous:{title:"Sending Emails",permalink:"/docs/emails"},next:{title:"Database Configuration",permalink:"/docs/database-config"}},c={},l=[{value:"Event Job",id:"event-job",level:3},{value:"Triggering an event",id:"triggering-an-event",level:3}],g={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"GoCondor")," defining events is straightforward, first you need to add the event name as a constant to the file ",(0,o.kt)("inlineCode",{parentName:"p"},"events\\event-names.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="#file: events\\event-names.go"',title:'"#file:','events\\event-names.go"':!0},'package events\n\nconst PASSWORD_CHANGED = "password-changed"\nconst PROCESS_COMPLETED = "process-completed"\n')),(0,o.kt)("p",null,"Next, you need to create the ",(0,o.kt)("inlineCode",{parentName:"p"},"event job")),(0,o.kt)("h3",{id:"event-job"},"Event Job"),(0,o.kt)("p",null,"the event job is simply a function that gets executed every time the event is triggered,\nhere is an example of one"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="#file: events\\jobs"',title:'"#file:','events\\jobs"':!0},'package eventjobs\n\nimport (\n    "fmt"\n\n    "github.com/gocondor/core"\n    "github.com/gocondor/gocondor/models"\n)\n\nvar SendPasswordChangedNotificationEmail core.EventJob = func(event *core.Event, c *core.Context) {\n    go func() {\n        // logic to send the email goes here\n    }()\n}\n')),(0,o.kt)("p",null,"Next, you have to register the ",(0,o.kt)("inlineCode",{parentName:"p"},"event job")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"events manager")," so it can be executed when the event is triggered, you can simply do that in the file ",(0,o.kt)("inlineCode",{parentName:"p"},"register-events.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/gocondor/core"\n    "github.com/gocondor/gocondor/events"\n    eventjobs "github.com/gocondor/gocondor/events/jobs"\n)\n\n// Register events\nfunc registerEvents() {\n    eventsManager := core.ResolveEventsManager()\n    //########################################\n    //#      events registration         #####\n    //########################################\n\n    // register your event here...\n    eventsManager.Register(events.PASSWORD_CHANGED, eventjobs.SendPasswordChangedNotificationEmail)\n}\n')),(0,o.kt)("h3",{id:"triggering-an-event"},"Triggering an event"),(0,o.kt)("p",null,"Events can be triggered using the ",(0,o.kt)("inlineCode",{parentName:"p"},"events manager"),", here is how"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// Copyright 2023 Harran Ali <harran.m@gmail.com>. All rights reserved.\n// Use of this source code is governed by MIT-style\n// license that can be found in the LICENSE file.\n\npackage handlers\n\nimport (\n    "github.com/gocondor/core"\n    "github.com/gocondor/gocondor/events"\n    "github.com/gocondor/gocondor/models"\n)\n\nfunc Signup(c *core.Context) *core.Response {\n    var user models.User\n    err = c.GetEventsManager().Fire(\n        &core.Event{\n            Name: events.PASSWORD_CHANGED, \n            Payload: map[string]interface{}{\n                "user": user,\n            }\n    })\n}\n')))}p.isMDXComponent=!0}}]);